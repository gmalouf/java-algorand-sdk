name: Publish to Maven Repositories

on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'The tag_version, e.g. x.x.x'
        default: 'x.x.x'
        required: true
        type: 'string'
      dry_run:
        description: 'Whether this is a dry_run publish.'
        default: false
        required: true
        type: 'boolean'

jobs:
  build-and-publish:
    runs-on: ubuntu-24.04
    permissions:
      contents: write # For building and potentially deploying packages
      id-token: write # For OIDC authentication, if used
      pages: write    # Specifically for deploying to GitHub Pages
      packages: write
      pull-requests: write # Often needed by plugins for status checks, etc.
      statuses: write      # For updating commit statuses
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_version }}
      - name: Set up JDK 11 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          architecture: x64
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with Maven
        run: mvn package

      - name: Publish to GitHub Packages
        run: mvn deploy -P github,default
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 1: Build the Javadocs/Site using Maven (local generation)
      - name: Build Javadocs/Site
        run: mvn site -P default # Removed -P github as we are not deploying with maven plugin

      # Step 2: Configure GitHub Pages
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4

      # Step 3: Upload the generated Javadocs/Site as an artifact for Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'target/site' # Path to your generated Javadocs/site directory

      # Step 4: Deploy the artifact to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: 'temurin'
          java-version: '11'
          server-id: central
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Publish to Apache Maven Central
        run: mvn deploy -P release,default
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}